#include <GL/glut.h>
float angle = 0.0f; // Rotation angle (initially 0)

void init()
{
    glEnable(GL_DEPTH_TEST); // Enable depth buffer
    glClearColor(0.0, 0.0, 0.0, 1.0); // Background color
}

void drawCube()
{
    glBegin(GL_QUADS);

    // Front face (Red)
    glColor3f(1, 0, 0);
    glVertex3f(-1, -1, 1);
    glVertex3f( 1, -1, 1);
    glVertex3f( 1,  1, 1);
    glVertex3f(-1,  1, 1);

    // Back face (Green)
    glColor3f(0, 1, 0);
    glVertex3f(-1, -1, -1);
    glVertex3f(-1,  1, -1);
    glVertex3f( 1,  1, -1);
    glVertex3f( 1, -1, -1);

    // Top face (Blue)
    glColor3f(0, 0, 1);
    glVertex3f(-1, 1, -1);
    glVertex3f(-1, 1,  1);
    glVertex3f( 1, 1,  1);
    glVertex3f( 1, 1, -1);

    // Bottom face (Yellow)
    glColor3f(1, 1, 0);
    glVertex3f(-1, -1, -1);
    glVertex3f( 1, -1, -1);
    glVertex3f( 1, -1,  1);
    glVertex3f(-1, -1,  1);

    // Right face (Magenta)
    glColor3f(1, 0, 1);
    glVertex3f(1, -1, -1);
    glVertex3f(1,  1, -1);
    glVertex3f(1,  1,  1);
    glVertex3f(1, -1,  1);

    // Left face (Cyan)
    glColor3f(0, 1, 1);
    glVertex3f(-1, -1, -1);
    glVertex3f(-1, -1,  1);
    glVertex3f(-1,  1,  1);
    glVertex3f(-1,  1, -1);

    glEnd();
}

// Display callback
void display()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    glTranslatef(0.0f, 0.0f, -6.0f);      // Move cube back
    glRotatef(angle, 1.0f, 1.0f, 0.0f);   // Rotate cube slowly

    drawCube();

    glutSwapBuffers();
}

// Idle callback for smooth slow rotation
void spinCube()
{
    angle += 0.05f;  // Slow rotation speed (was 0.3 before)
    if (angle > 360.0f)
        angle -= 360.0f;

    glutPostRedisplay(); // Redraw the scene
}

// Window reshape handler
void reshape(int w, int h)
{
    if (h == 0) h = 1;
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, (float)w / h, 1.0, 100.0);
    glMatrixMode(GL_MODELVIEW);
}

// Main entry point
int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Slow Rotating 3D Cube");

    init();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutIdleFunc(spinCube); // Continuous slow rotation

    glutMainLoop();
    return 0;
}
