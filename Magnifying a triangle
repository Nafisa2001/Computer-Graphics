#include <GL/glut.h>
#include <iostream>
using namespace std;

float triangle[3][2];  // Original triangle vertices
float scaled[3][2];    // Scaled triangle vertices
float xf, yf;          // Fixed point
float sx, sy;          // Scaling factors

void applyScaling() {
    for (int i = 0; i < 3; i++) {
        scaled[i][0] = xf + sx * (triangle[i][0] - xf);
        scaled[i][1] = yf + sy * (triangle[i][1] - yf);
    }
}
void drawTriangle(float t[3][2]) {
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < 3; i++)
        glVertex2f(t[i][0], t[i][1]);
    glEnd();
}
void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw original triangle in blue
    glColor3f(0.0, 0.0, 1.0);
    drawTriangle(triangle);

    // Draw scaled triangle in red
    glColor3f(1.0, 0.0, 0.0);
    drawTriangle(scaled);

    glFlush();
}

void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(-500, 500, -500, 500);
}

int main(int argc, char** argv) {
    cout << "Enter triangle coordinates (x y for 3 points):\n";
    for (int i = 0; i < 3; i++) {
        cout << "Point " << i + 1 << ": ";
        cin >> triangle[i][0] >> triangle[i][1];
    }

    cout << "Enter fixed point (xf yf): ";
    cin >> xf >> yf;

    cout << "Enter scaling factors (sx sy): ";
    cin >> sx >> sy;

    applyScaling();

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(600, 600);
    glutCreateWindow("Triangle Magnification About a Point");
    init();
    glutDisplayFunc(display);
    glutMainLoop();

    return 0;
}
